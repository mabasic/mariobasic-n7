(ns app\pages\start
  (:require app\layouts\main)
  (:require mabasic\json\json)
  (:require app\mail)
  (:require app\database)
  (:require app\emails\inquiries\received)
  (:require app\validator)
  (:require app\helpers)
  (:use Exception))

(defn white []
  [:div
   [:h1 {:class "display-1 pt-5 mt-5"} "Let's work together ğŸš€"]
   [:p [:a {:href "/" :class "text-dark"} "home"] "/ start"]])

(defn black [] [:div {:id "get-started"}])

(defn render [request]
  {:status 200
   :body (main/render
          request
          {:title "Let's work together ğŸš€ | Mario BaÅ¡iÄ‡"
           :meta-description "I am always looking for new challenges and interesting projects."
           :white (white)
           :black (black)}
          (list [:script {:src "/start.js"}]))})

(def store-rules
  {"first_name" [:required {:rule :string :max 255}]
   "last_name" [:required {:rule :string :max 255}]
   "company_name" [:nullable {:rule :string :max 255}]
   "vat_number" [:nullable {:rule :string :max 255}]
   "address" [:required {:rule :string :max 255}]
   "city" [:required {:rule :string :max 255}]
   "zip_code" [:required {:rule :string :max 255}]
   "country" [:required {:rule :string :max 255}]
   "email_address" [:required {:rule :string :max 255}]
   "phone" [:required {:rule :string :max 255}]
   "topic" [:required {:rule :string :max 255}]
   "budget" [:required {:rule :string :max 255}]
   "subject" [:required {:rule :string :max 255}]
   "q1" [:nullable :string]
   "q2" [:nullable :string]
   "q3" [:nullable :string]
   "q4" [:nullable :string]
   "q5" [:nullable :string]
   "q6" [:nullable :string]
   "q7" [:nullable :string]
   "q8" [:nullable :string]
   "q9" [:nullable :string]
   "gdpr_consent" [:required :accepted]})

(defn store [request]
  (let [{:result validated :errors errors}
        (validator/validate request store-rules)]
    (if (= validated false)
      (validator/validation-failed-response errors)
      (let [data (helpers/extract-data-from-request request)]
        (try
          (do
            # Send email
            (mail/send {:to "mario@laravelista.hr"
                        :subject "Inquiry Received"
                        :message (received/render data)
                        :reply-to (:email_address data)})

            # Store in database
            (php/-> database/inquiries-store (insert (helpers/encode-value data)))

            # Send response "success"
            {:status 200
             :headers {"Content-Type" "application/json"}
             :body (json/encode {:status "success"})})
          (catch Exception e
            # Send response "error"
            {:status 500
             :headers {"Content-Type" "application/json"}
             :body (json/encode {:status "error" :message (php/-> e (getMessage))})}))))))