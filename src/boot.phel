(ns app\boot
  (:require phel\http)
  (:require app\pages\home)
  (:require app\pages\code-of-conduct)
  (:require app\pages\contributing)
  (:require app\pages\backers)
  (:require app\pages\privacy)
  (:require app\pages\origin)
  (:require app\pages\laravel-collection)
  (:require app\pages\portfolio)
  (:require app\pages\start)
  (:require app\pages\posts\index :as posts-index)
  (:require app\pages\posts\show :as posts-show)
  (:require app\pages\page-not-found)
  (:require app\csrf)
  (:require app\redirector)
  (:require app\router)
  (:require app\middleware\verify-csrf-token)
  (:use Dotenv\Dotenv))

(def dotenv (php/:: Dotenv (createImmutable (str __DIR__ "/../"))))

(php/-> dotenv (load))
(php/-> dotenv (required (php/array "APP_ENV" "APP_URL")))

(php/session_name "mariobasic_session")
(php/session_start)

(if (nil? (php/aget php/$_SESSION "_token"))
  (php/aset php/$_SESSION "_token" (csrf/generate-token)))

(defstruct route [method url page])

(defstruct redirect [from to handler])

(def routes
  [(route "GET" "/" home/render)
   (route "GET" "/code-of-conduct" code-of-conduct/render)
   (route "GET" "/contributing" contributing/render)
   (route "GET" "/backers" backers/render)
   (route "GET" "/privacy" privacy/render)
   (route "GET" "/origin" origin/render)
   (route "GET" "/portfolio" portfolio/render)
   (route "GET" "/a-collection-of-laravel-tutorials" laravel-collection/render)
   (route "GET" "/start" start/render)
   (route "POST" "/start" start/store)
   (route "GET" "/blog" posts-index/render)
   (route "GET" "/{year}/{month}/{day}/{slug}" posts-show/render)])

(def redirects
  [(redirect "/about" "/origin" redirector/moved-permanently)
   (redirect "/the-book" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/signup" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/login" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/json-web-token-authentication-for-lumen" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/laravel-fractal" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/satis-composer-repository-for-your-private-packages" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/using-beanstalkd-with-laravel" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/deploy-your-app-to-digitialocean-from-codeship-using-envoy" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)
   (redirect "/build-an-api-with-lumen-and-fractal" "/a-collection-of-laravel-tutorials" redirector/moved-permanently)])

(def global-middleware [verify-csrf-token/handle])

(def request (http/request-from-globals))

(defn route-match [request routes redirects]
  (let
    [route (find
            (fn [route]
              (and
               (true?
                (router/match-route
                 (:url route)
                 (:path (:uri request))))
               (=
                (get route :method)
                (get request :method))))
            routes)
     redirect (find
               (fn [redirect]
                 (and
                  (=
                   (get redirect :from)
                   (get (get request :uri) :path))
                  (=
                   "GET"
                   (get request :method))))
               redirects)]
    (cond
      (and (nil? route) (nil? redirect)) (page-not-found/render request)
      (not (nil? redirect)) ((:handler redirect) (:to redirect))
      true ((get route :page) request (router/get-parameters (:url route) (:path (:uri request)))))))

(defn run-global-middleware [request global-middleware]
  (if (= (count global-middleware) 0)
    request
    (let [response ((first global-middleware) request)]
      (if (= response request)
        (recur request (rest global-middleware))
        response))))

(defn emit-response [response]

  (let [rsp (http/create-response-from-map response)]
    (http/emit-response rsp)))

(let [response (run-global-middleware request global-middleware)]
  (if (= response request)
    (emit-response (route-match request routes redirects))
    (emit-response response)))