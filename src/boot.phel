(ns app\boot
  (:require phel\http)
  (:require app\pages\page-not-found)
  (:require app\csrf)
  (:require app\router)
  (:require app\middleware\verify-csrf-token)
  (:require app\routes :refer [routes route])
  (:require app\redirects :refer [redirects redirect])
  (:use Dotenv\Dotenv))

(def dotenv (php/:: Dotenv (createImmutable (str __DIR__ "/../"))))

(php/-> dotenv (load))
(php/-> dotenv (required (php/array "APP_ENV" "APP_URL")))

(php/session_name "mariobasic_session")
(php/session_start)

(if (nil? (php/aget php/$_SESSION "_token"))
  (php/aset php/$_SESSION "_token" (csrf/generate-token)))

(def global-middleware [verify-csrf-token/handle])

(def request
  (try
    (http/request-from-globals)
    (catch \Exception e nil)))

(defn route-match [request routes redirects]
  (let
    [route (find
            (fn [route]
              (and
               (true?
                (router/match-route
                 (:url route)
                 (:path (:uri request))))
               (=
                (get route :method)
                (get request :method))))
            routes)
     redirect (find
               (fn [redirect]
                 (and
                  (=
                   (get redirect :from)
                   (get (get request :uri) :path))
                  (=
                   "GET"
                   (get request :method))))
               redirects)]
    (cond
      (and (nil? route) (nil? redirect)) (page-not-found/render request)
      (not (nil? redirect)) ((:handler redirect) (:to redirect))
      true ((get route :page) request (router/get-parameters (:url route) (:path (:uri request)))))))

(defn run-global-middleware [request global-middleware]
  (if (= (count global-middleware) 0)
    request
    (let [response ((first global-middleware) request)]
      (if (= response request)
        (recur request (rest global-middleware))
        response))))

(defn emit-response [response]
  (let [rsp (http/create-response-from-map response)]
    (http/emit-response rsp)))

(let [response (run-global-middleware request global-middleware)]
  (if (not (= request nil))
    (if (= response request)
      (emit-response (route-match request routes redirects))
      (emit-response response))))