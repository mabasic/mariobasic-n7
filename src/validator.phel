(ns app\validator
  (:require phel\json)
  (:require app\helpers))

# It replaces underscore and dash with a blank space.
# Example: (prettify-field "first_name") outputs "first name".
(defn prettify-field [field]
  (php/str_replace (php/array "_" "-") " " field))

# It returns true if the `field` key is present in data,
# value or the `field` is not nil or an empty string "", otherwise false.
(defn rule-required [data field]
  (let [error-message (str "The " (prettify-field field) " is required.")]
    (if
      (find
       (fn [key] (= key (keyword field)))
       (keys data))
      (let [field-value ((keyword field) data)]
        (if
          (or
           (nil? field-value)
           (= field-value ""))
          error-message
          true))
      error-message)))

(defn rule-present [data field]
  (let [error-message (str "The " (prettify-field field) " needs to be present.")]
    (if
      (find
       (fn [key] (= key (keyword field)))
       (keys data))
      true
      error-message)))

(defn rule-honeypot [data field]
  (let [error-message (str "The " (prettify-field field) " is used for honeypot spam protection.")]
    (if
      (find
       (fn [key] (= key (keyword field)))
       (keys data))
      (let [field-value ((keyword field) data)]
        (if-not
          (= field-value "")
          error-message
          true))
      error-message)))

(defn rule-string [data field  & [field-rule]]
  (let [field-value ((keyword field) data)
        field-rule (or field-rule {:rule :string})]
    (if (string? field-value)
      (let [rule-validation-results
            (filter
             (fn [result] (not (or (nil? result) (true? result))))
             (for [[rule-key rule-value] :pairs (unset field-rule :rule)]
               (case rule-key
                 :max (if (<= (php/strlen field-value) rule-value)
                        true
                        (str "The " (prettify-field field) " may not be greater than " rule-value " characters.")))))]
        (first rule-validation-results))
      (str "The " (prettify-field field) " must be a string."))))

(defn rule-accepted [data field]
  (let [field-value ((keyword field) data)]
    (if
      (or
       (= field-value "yes")
       (= field-value "on")
       (= field-value 1)
       (= field-value true))
      true
      (str "The " (prettify-field field) " must be accepted."))))

# It returns true if the field is null, otherwise it returns nil.
(defn rule-nullable [data field]
  (let [field-value ((keyword field) data)]
    (if (nil? field-value) true)))

# It returns :result true if validation has passed.
# In this case :errors should be an empty hash-map.
(defn validate [data rules]
  (let [errors (transient {})]
    (foreach [field field-rules rules]
      (let [# It returns a boolean depending if the field-rules contain :nullable value.
            field-has-nullable-rule (not (nil? (find (fn [x] (= x :nullable)) field-rules)))
            # It returns a boolean depending if the field-value is null
            field-value-is-null (if field-has-nullable-rule (rule-nullable data field) false)
            field-validation-results
            # If field-rules contain :nullable and field-value is null, it returns an empty array,
            # otherwise it returns an array with validation error messages if any.
            (if (and field-has-nullable-rule field-value-is-null) []
                (filter
                  # It filters results which are nil or true. It keeps only validation messages.
                 (fn [result] (not (or (nil? result) (true? result))))
                 (for [field-rule :in field-rules]
                   (cond
                     (= field-rule :required) (rule-required data field)
                     (= field-rule :string) (rule-string data field)
                     (= field-rule :accepted) (rule-accepted data field)
                     (= field-rule :present) (rule-present data field)
                     (= field-rule :honeypot) (rule-honeypot data field)
                     (hash-map? field-rule)
                     (case (:rule field-rule)
                        # Handles additional string rule options like: max, min, etc ...
                       :string (rule-string data field field-rule))))))]
        (if (> (count field-validation-results) 0)
          (put errors field field-validation-results))))
    {:result (= (count errors) 0)
     :errors (persistent errors)}))

(defn validation-failed-response [errors]
  {:status 422
   :headers {"Content-Type" "application/json"}
   :body (json/encode
          {:message "The given data was invalid."
           :errors errors})})

(defn has-error [errors key]
  (> (count (get errors key)) 0))

(defn get-class [class-value errors field]
  (str class-value
       (if (has-error errors field) " is-invalid")))

(defn
  get-first-error-message [errors key default-value]
  "It returns the first error message for a field or the given default-value."
  (if (has-error errors key)
    (first (get errors key))
    default-value))